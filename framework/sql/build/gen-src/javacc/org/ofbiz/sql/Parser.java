/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.ofbiz.sql;

import java.util.List;
import java.util.Map;
import java.util.Set;

import javolution.util.FastList;
import javolution.util.FastMap;
import javolution.util.FastSet;

@SuppressWarnings("all")
public final class Parser implements ParserConstants {
    private boolean deleteSupportsUsing = true;
    private boolean updateSupportsFrom = true;

    public Parser deleteSupportsUsing(boolean value) {
        deleteSupportsUsing = value;
        return this;
    }

    public Parser updateSupportsFrom(boolean value) {
        updateSupportsFrom = value;
        return this;
    }

    private Condition reduce(List<Condition> conditions, Joiner joiner) {
        if (conditions.size() == 1) {
            return conditions.get(0);
        }
        return new ConditionList(joiner, conditions);
    }

  final public List<SQLStatement<?>> SQLFile() throws ParseException {
    List<SQLStatement<?>> list = FastList.newInstance();
    SQLStatement<?> statement;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case DELETE:
      case UPDATE:
      case INSERT:
      case CREATE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement = Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
          list.add(statement);
    }
    jj_consume_token(0);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement StandaloneStatement() throws ParseException {
    SQLStatement statement;
    statement = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public SQLView ViewStatement() throws ParseException {
    SQLView sqlView;
    jj_consume_token(CREATE);
    jj_consume_token(VIEW);
    sqlView = View();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(0);
      {if (true) return sqlView;}
    throw new Error("Missing return statement in function");
  }

  final public SQLSelect SelectStatement() throws ParseException {
    SQLSelect sqlSelect;
    sqlSelect = Select();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                           {if (true) return sqlSelect;}
    throw new Error("Missing return statement in function");
  }

  final public SQLDelete DeleteStatement() throws ParseException {
    SQLDelete sqlDelete;
    sqlDelete = Delete();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                           {if (true) return sqlDelete;}
    throw new Error("Missing return statement in function");
  }

  final public SQLUpdate UpdateStatement() throws ParseException {
    SQLUpdate sqlUpdate;
    sqlUpdate = Update();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                           {if (true) return sqlUpdate;}
    throw new Error("Missing return statement in function");
  }

  final public SQLInsert InsertStatement() throws ParseException {
    SQLInsert sqlInsert;
    sqlInsert = Insert();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                           {if (true) return sqlInsert;}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condition() throws ParseException {
    Condition c;
    c = ConditionExpression();
    jj_consume_token(0);
                                    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public FieldAll parse_FieldAll() throws ParseException {
    FieldAll fieldAll;
    fieldAll = FieldAll();
    jj_consume_token(0);
                                {if (true) return fieldAll;}
    throw new Error("Missing return statement in function");
  }

  final public FieldDef parse_FieldDef() throws ParseException {
    FieldDef fieldDef;
    fieldDef = FieldDef();
    jj_consume_token(0);
                                {if (true) return fieldDef;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByItem parse_OrderByItem() throws ParseException {
    OrderByItem item;
    item = OrderByItem();
    jj_consume_token(0);
                               {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final private SQLStatement Statement() throws ParseException {
    SQLStatement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      statement = Select();
                               {if (true) return statement;}
      break;
    case DELETE:
      statement = Delete();
                               {if (true) return statement;}
      break;
    case UPDATE:
      statement = Update();
                               {if (true) return statement;}
      break;
    case INSERT:
      statement = Insert();
                               {if (true) return statement;}
      break;
    case CREATE:
      statement = Creates();
                                {if (true) return statement;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private SQLStatement Creates() throws ParseException {
    SQLStatement statement;
    boolean isUnique = false;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIEW:
      jj_consume_token(VIEW);
      statement = View();
                                    {if (true) return statement;}
      break;
    case INDEX:
    case UNIQUE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIQUE:
        jj_consume_token(UNIQUE);
                       isUnique = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(INDEX);
      statement = Index(isUnique);
                                              {if (true) return statement;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private SQLView View() throws ParseException {
    String name;
    SQLSelect sqlSelect;
    name = NamePart();
    jj_consume_token(AS);
    sqlSelect = Select();
                                              {if (true) return new SQLView(name, sqlSelect);}
    throw new Error("Missing return statement in function");
  }

  final private SelectGroup SelectGroup() throws ParseException {
    boolean isDistinct = false;
    List<String> groupBy = null;
    Map<String, FieldDef> fieldDefs = FastMap.newInstance();
    List<FieldAll> fieldAlls = FastList.newInstance();
    Set<String> fieldAllAliases = FastSet.newInstance();
    Table table;
    Condition whereCondition = null, havingCondition = null;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                           isDistinct = true;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    SelectField(fieldDefs, fieldAlls, fieldAllAliases);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      SelectField(fieldDefs, fieldAlls, fieldAllAliases);
    }
    jj_consume_token(FROM);
    table = Table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      whereCondition = ConditionExpression();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      jj_consume_token(HAVING);
      havingCondition = ConditionExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      groupBy = FieldList();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
      {if (true) return new SelectGroup(isDistinct, fieldAlls, fieldDefs, table, whereCondition, havingCondition, groupBy);}
    throw new Error("Missing return statement in function");
  }

  final private Unioned.Operator UnionOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      jj_consume_token(UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
                {if (true) return Unioned.Operator.UNION_ALL;}
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
        {if (true) return Unioned.Operator.UNION;}
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
                {if (true) return Unioned.Operator.INTERSECT_ALL;}
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
        {if (true) return Unioned.Operator.INTERSECT;}
      break;
    case EXCEPT:
      jj_consume_token(EXCEPT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
                {if (true) return Unioned.Operator.EXCEPT_ALL;}
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
        {if (true) return Unioned.Operator.EXCEPT;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Unioned Unioned() throws ParseException {
    Unioned.Operator operator;
    SelectGroup selectGroup;
    Unioned next = null;
    operator = UnionOperator();
    selectGroup = SelectGroup();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERSECT:
    case EXCEPT:
    case UNION:
      next = Unioned();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
      {if (true) return new Unioned(operator, selectGroup, next);}
    throw new Error("Missing return statement in function");
  }

  final private SQLSelect Select() throws ParseException {
    boolean hadEarlyRelations = false;
    Unioned unioned = null;
    boolean isDistinct = false;
    List<OrderByItem> orderBy = null;
    List<String> groupBy = null;
    Map<String, FieldDef> fieldDefs = FastMap.newInstance();
    List<FieldAll> fieldAlls = FastList.newInstance();
    Set<String> fieldAllAliases = FastSet.newInstance();
    Table table;
    Map<String, Relation> relations = FastMap.newInstance();
    Condition whereCondition = null, havingCondition = null;
    int offset = -1, limit = -1;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                           isDistinct = true;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    SelectField(fieldDefs, fieldAlls, fieldAllAliases);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      SelectField(fieldDefs, fieldAlls, fieldAllAliases);
    }
    jj_consume_token(FROM);
    table = Table();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      jj_consume_token(RELATION);
      Relation(relations);
                                                    hadEarlyRelations = true;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      whereCondition = ConditionExpression();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      jj_consume_token(HAVING);
      havingCondition = ConditionExpression();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      groupBy = FieldList();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERSECT:
    case EXCEPT:
    case UNION:
      unioned = Unioned();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      if (jj_2_1(1) && (!hadEarlyRelations)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(RELATION);
      Relation(relations);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      orderBy = OrderByList();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OFFSET:
      jj_consume_token(OFFSET);
      offset = Integer();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
      limit = Integer();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
      {if (true) return new SQLSelect(new SelectGroup(isDistinct, fieldAlls, fieldDefs, table, whereCondition, havingCondition, groupBy), unioned, relations, orderBy, offset, limit);}
    throw new Error("Missing return statement in function");
  }

  final private void Relation(Map<String, Relation> relations) throws ParseException {
    String type = null, title = null, entityName;
    KeyMap keyMap;
    List<KeyMap> keyMaps = FastList.newInstance();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      type = NamePart();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TITLE:
      jj_consume_token(TITLE);
      title = NamePart();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(NAME);
             entityName = getToken(0).image;
    jj_consume_token(MAP);
    keyMap = PlainKeyMap();
                                 keyMaps.add(keyMap);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      keyMap = PlainKeyMap();
                               keyMaps.add(keyMap);
    }
        Relation relation = new Relation(type, title, entityName, keyMaps);
        if (relations.containsKey(relation.getName())) {if (true) throw new ParseException("Duplicate relation: " + relation);}
        relations.put(relation.getName(), relation);
  }

  final private KeyMap PlainKeyMap() throws ParseException {
    String left, right;
    left = NamePart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      right = NamePart();
                                      {if (true) return new KeyMap(left, right);}
      break;
    default:
      jj_la1[34] = jj_gen;
            {if (true) return new KeyMap(left, left);}
    }
    throw new Error("Missing return statement in function");
  }

  final private SQLUpdate Update() throws ParseException {
    TableName tableName;
    List<Table> tableList = null;
    Condition whereCondition = null;
    List<SetField> allSetFields = FastList.newInstance();
    List<SetField> setFields;
    Joined joined = null;
    jj_consume_token(UPDATE);
    tableName = TableName();
    jj_consume_token(SET);
    setFields = SetField();
                           allSetFields.addAll(setFields);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      setFields = SetField();
                                     allSetFields.addAll(setFields);
    }
    if (jj_2_2(2147483647) && (updateSupportsFrom)) {
      jj_consume_token(FROM);
      joined = JoinedRest(false, tableName);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      whereCondition = ConditionExpression();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
      {if (true) return new SQLUpdate(new Table(tableName, joined), allSetFields, whereCondition);}
    throw new Error("Missing return statement in function");
  }

  final private SQLDelete Delete() throws ParseException {
    TableName tableName;
    List<Table> tableList = null;
    Condition whereCondition = null;
    Joined joined = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    tableName = TableName();
    if (jj_2_3(2147483647) && (deleteSupportsUsing)) {
      jj_consume_token(USING);
      joined = JoinedRest(false, tableName);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      whereCondition = ConditionExpression();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
      {if (true) return new SQLDelete(new Table(tableName, joined), whereCondition);}
    throw new Error("Missing return statement in function");
  }

  final private SQLIndex Index(boolean isUnique) throws ParseException {
    String name, table, using = null;
    ConstantValue value;
    List<ConstantValue> values = FastList.newInstance();
    name = NamePart();
    jj_consume_token(ON);
    table = NamePart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USING:
      jj_consume_token(USING);
      using = NamePart();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(OPEN_PAREN);
    value = ConstantValue();
                            values.add(value);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value = ConstantValue();
                                      values.add(value);
    }
    jj_consume_token(CLOSE_PAREN);
      {if (true) return new SQLIndex(isUnique, name, table, using, values);}
    throw new Error("Missing return statement in function");
  }

  final private SQLInsert Insert() throws ParseException {
    TableName tableName;
    List<String> columns = FastList.newInstance();
    String n;
    InsertSource source;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tableName = TableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
      n = NamePart();
                       columns.add(n);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        n = NamePart();
                                 columns.add(n);
      }
      jj_consume_token(CLOSE_PAREN);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUES:
      source = InsertValues();
      break;
    case SELECT:
      source = Select();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new SQLInsert(tableName, source, columns);}
    throw new Error("Missing return statement in function");
  }

  final private InsertValues InsertValues() throws ParseException {
    List<InsertRow> list = FastList.newInstance();
    InsertRow row;
    jj_consume_token(VALUES);
    row = InsertRow();
                      list.add(row);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      row = InsertRow();
                                list.add(row);
    }
      {if (true) return new InsertValues(list);}
    throw new Error("Missing return statement in function");
  }

  final private InsertRow InsertRow() throws ParseException {
    List<Value> list = FastList.newInstance();
    Value v;
    jj_consume_token(OPEN_PAREN);
    v = InsertValue();
                      list.add(v);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      v = InsertValue();
                                list.add(v);
    }
    jj_consume_token(CLOSE_PAREN);
      {if (true) return new InsertRow(list);}
    throw new Error("Missing return statement in function");
  }

  final private Value InsertValue() throws ParseException {
    Value v;
    Integer i;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      v = ParameterValue();
                           {if (true) return v;}
      break;
    case INTEGER:
      i = Integer();
                    {if (true) return new NumberValue<Integer>(i);}
      break;
    case START_SQUOTE:
      s = SQuoted();
                    {if (true) return new StringValue(s);}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private List<SetField> SetField() throws ParseException {
    List<SetField> setFields = FastList.newInstance();
    String n;
    Value v;
    List<String> columnList = FastList.newInstance();
    List<Value> valueList = FastList.newInstance();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case START_SQUOTE:
      case INTEGER:
      case NAME:
        v = Value();
                          setFields.add(new SetField(n, v));
        break;
      case OPEN_PAREN:
        v = MathValue();
                              setFields.add(new SetField(n, v));
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
      n = NamePart();
                         columnList.add(n);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        n = NamePart();
                                   columnList.add(n);
      }
      jj_consume_token(CLOSE_PAREN);
      jj_consume_token(EQUALS);
      jj_consume_token(OPEN_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case START_SQUOTE:
      case INTEGER:
      case NAME:
        v = Value();
        break;
      case OPEN_PAREN:
        v = MathValue();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          valueList.add(v);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
        case START_SQUOTE:
        case INTEGER:
        case NAME:
          v = Value();
          break;
        case OPEN_PAREN:
          v = MathValue();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                valueList.add(v);
      }
      jj_consume_token(CLOSE_PAREN);
            if (columnList.size() != valueList.size()) {if (true) throw new ParseException();}
            for (int i = 0; i < columnList.size(); i++) {
                setFields.add(new SetField(columnList.get(i), valueList.get(i)));
            }
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return setFields;}
    throw new Error("Missing return statement in function");
  }

  final private Table Table() throws ParseException {
    TableName tableName;
    Joined joined = null;
    tableName = TableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JOIN:
    case LEFT:
      joined = Joined(tableName);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
      {if (true) return new Table(tableName, joined);}
    throw new Error("Missing return statement in function");
  }

  final private Joined Joined(TableName leftTableName) throws ParseException {
    Boolean isOptional;
    Joined joined = null;
    isOptional = Joiner();
    joined = JoinedRest(isOptional, leftTableName);
      {if (true) return joined;}
    throw new Error("Missing return statement in function");
  }

  final private Joined JoinedRest(boolean isOptional, TableName leftTableName) throws ParseException {
    TableName rightTableName;
    List<KeyMap> keyMaps;
    Joined joined = null;
    rightTableName = TableName();
    keyMaps = KeyMaps(leftTableName.getAlias(), rightTableName.getAlias());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JOIN:
    case LEFT:
      joined = Joined(rightTableName);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
      {if (true) return new Joined(isOptional, rightTableName, keyMaps, joined);}
    throw new Error("Missing return statement in function");
  }

  final private List<KeyMap> KeyMaps(String leftAlias, String rightAlias) throws ParseException {
    List<KeyMap> keyMaps = FastList.newInstance();
    String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      KeyMap(keyMaps, leftAlias, rightAlias);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_14;
        }
        jj_consume_token(AND);
        KeyMap(keyMaps, leftAlias, rightAlias);
      }
      break;
    case USING:
      jj_consume_token(USING);
      n = NamePart();
                         keyMaps.add(new KeyMap(n, n));
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        n = NamePart();
                                   keyMaps.add(new KeyMap(n, n));
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return keyMaps;}
    throw new Error("Missing return statement in function");
  }

  final private void KeyMap(List<KeyMap> keyMaps, String leftAlias, String rightAlias) throws ParseException {
    String alias1, field1;
    String alias2, field2;
    alias1 = NamePart();
    jj_consume_token(PERIOD);
    field1 = NamePart();
    jj_consume_token(EQUALS);
    alias2 = NamePart();
    jj_consume_token(PERIOD);
    field2 = NamePart();
        if (alias1.equals(leftAlias)) {
            if (!alias2.equals(rightAlias)) {if (true) throw new ParseException("invalid right alias(" + alias2 + "), expected(" + rightAlias + ")");}
            keyMaps.add(new KeyMap(field1, field2));
        } else if (alias1.equals(rightAlias)) {
            if (!alias2.equals(leftAlias)) {if (true) throw new ParseException("invalid left alias(" + alias2 + "), expected(" + leftAlias + ")");}
            keyMaps.add(new KeyMap(field2, field1));
        } else {
            {if (true) throw new ParseException("invalid aliases, expected(" + leftAlias + " or " + rightAlias + ")");}
        }
  }

  final private TableName TableName() throws ParseException {
    String tableName, alias = null;
    tableName = NamePart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case TYPE:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      alias = NamePart();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
      {if (true) return new TableName(tableName, alias);}
    throw new Error("Missing return statement in function");
  }

  final private Boolean Joiner() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
      jj_consume_token(LEFT);
      jj_consume_token(JOIN);
                      {if (true) return Boolean.TRUE;}
      break;
    case JOIN:
      jj_consume_token(JOIN);
               {if (true) return Boolean.FALSE;}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private void SelectField(Map<String, FieldDef> fieldDefs, List<FieldAll> fieldAlls, Set<String> fieldAllAliases) throws ParseException {
    FieldAll fieldAll;
    FieldDef fieldDef;
    if (jj_2_4(3)) {
      fieldAll = FieldAll();
        if (fieldAllAliases.contains(fieldAll.getAlias())) {if (true) throw new ParseException("Duplicate aliasAll(" + fieldAll.getAlias() + ")");}
        fieldAlls.add(fieldAll); {if (true) return;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PAREN:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case AVG:
      case TYPE:
      case FIRST:
      case LAST:
      case NAME:
        fieldDef = FieldDef();
        if (fieldDefs.containsKey(fieldDef.getDefaultName())) {if (true) throw new ParseException("duplicate alias(" + fieldDef.getDefaultName() + ")");}
        fieldDefs.put(fieldDef.getDefaultName(), fieldDef);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final private FieldAll FieldAll() throws ParseException {
    String n, exc;
    Set<String> excludeList = FastSet.newInstance();
    n = NamePart();
    jj_consume_token(PERIOD);
    jj_consume_token(STAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCLUDE:
      jj_consume_token(EXCLUDE);
      jj_consume_token(OPEN_PAREN);
      exc = NamePart();
                         excludeList.add(exc);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        exc = NamePart();
                                   excludeList.add(exc);
      }
      jj_consume_token(CLOSE_PAREN);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
      {if (true) return new FieldAll(n, excludeList);}
    throw new Error("Missing return statement in function");
  }

  final private StaticValue StaticValue() throws ParseException {
    StaticValue v;
    String n, fieldName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERIOD:
        jj_consume_token(PERIOD);
        fieldName = NamePart();
                                              v = new FieldValue(n, fieldName);
        break;
      case OPEN_PAREN:
        v = FunctionCallRest(n);
        break;
      default:
        jj_la1[63] = jj_gen;
                v = new FieldValue(null, n);
      }
      break;
    case OPEN_PAREN:
      v = MathValue();
      break;
    default:
      jj_la1[64] = jj_gen;
      if (jj_2_5(5)) {
        v = CountAll();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COUNT:
        case MAX:
        case MIN:
        case SUM:
        case AVG:
        case FIRST:
        case LAST:
          v = AggregateFunction();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final private FieldDef FieldDef() throws ParseException {
    StaticValue v;
    String fieldAlias = null;
    v = StaticValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      fieldAlias = NamePart();
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
        {if (true) return new FieldDef(v, fieldAlias);}
    throw new Error("Missing return statement in function");
  }

  final private CountAllFunction CountAll() throws ParseException {
    String n;
    jj_consume_token(COUNT);
    jj_consume_token(OPEN_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      break;
    default:
      jj_la1[67] = jj_gen;
            n = null;
    }
    jj_consume_token(PERIOD);
    jj_consume_token(STAR);
    jj_consume_token(CLOSE_PAREN);
      {if (true) return new CountAllFunction(n);}
    throw new Error("Missing return statement in function");
  }

  final private StaticValue MathValue() throws ParseException {
    ConstantValue v;
    List<ConstantValue> values = FastList.newInstance();
    String operator = null, newOperator;
    jj_consume_token(OPEN_PAREN);
    v = ConstantValue();
                                     values.add(v);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case TEXT:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_17;
      }
      newOperator = MathOperator();
      v = ConstantValue();
            if (operator == null) {
                operator = newOperator;
            } else if (!newOperator.equals(operator)) {
                {if (true) throw new ParseException("Different operators in complex alias(" + operator + ":" + newOperator + ")");}
            }
            values.add(v);
    }
    jj_consume_token(CLOSE_PAREN);
        if (values.size() == 1 && values.get(0) instanceof StaticValue) {if (true) return (StaticValue) values.get(0);}
        {if (true) return new MathValue(operator, values);}
    throw new Error("Missing return statement in function");
  }

  final private AggregateFunction AggregateFunction() throws ParseException {
    StaticValue v;
    String name, n, fieldName;
    boolean isDistinct = false;
    name = AggregateName();
    jj_consume_token(OPEN_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                   isDistinct = true;
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERIOD:
        jj_consume_token(PERIOD);
        fieldName = NamePart();
                                              v = new FieldValue(n, fieldName);
        break;
      case OPEN_PAREN:
        v = FunctionCallRest(n);
        break;
      default:
        jj_la1[70] = jj_gen;
                v = new FieldValue(null, n);
      }
      break;
    case OPEN_PAREN:
      v = MathValue();
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSE_PAREN);
      {if (true) return new AggregateFunction(name, isDistinct, v);}
    throw new Error("Missing return statement in function");
  }

  final private FunctionCall FunctionCallRest(String name) throws ParseException {
    Value arg;
    List<Value> args = FastList.newInstance();
    jj_consume_token(OPEN_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case START_SQUOTE:
    case INTEGER:
    case NAME:
      arg = Value();
                      args.add(arg);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        arg = Value();
                                args.add(arg);
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAREN);
      {if (true) return new FunctionCall(name, args);}
    throw new Error("Missing return statement in function");
  }

  final private ConstantValue ConstantValue() throws ParseException {
    String n;
    ConstantValue v;
    int i;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PAREN:
        v = FunctionCallRest(n);
                                  {if (true) return v;}
        break;
      default:
        jj_la1[74] = jj_gen;
        v = FieldValue(n);
                            {if (true) return v;}
      }
      break;
    case INTEGER:
      i = Integer();
                    {if (true) return new NumberValue<Integer>(i);}
      break;
    case START_SQUOTE:
      s = SQuoted();
                    {if (true) return new StringValue(s);}
      break;
    case OPEN_PAREN:
      v = MathValue();
                      {if (true) return v;}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String NamePart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      jj_consume_token(NAME);
               {if (true) return getToken(0).image;}
      break;
    case TYPE:
      jj_consume_token(TYPE);
               {if (true) return getToken(0).image;}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String DQuoted() throws ParseException {
    StringBuilder sb = new StringBuilder();
    jj_consume_token(START_DQUOTE);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESCAPED:
      case TEXT:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        jj_consume_token(TEXT);
                   sb.append(getToken(0).image);
        break;
      case ESCAPED:
        jj_consume_token(ESCAPED);
                      sb.append(getToken(0).image);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END_DQUOTE);
      {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final private String SQuoted() throws ParseException {
    StringBuilder sb = new StringBuilder();
    jj_consume_token(START_SQUOTE);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESCAPED:
      case ESCAPE_SQUOTE:
      case TEXT:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        jj_consume_token(TEXT);
                   sb.append(getToken(0).image);
        break;
      case ESCAPED:
        jj_consume_token(ESCAPED);
                      sb.append(getToken(0).image);
        break;
      case ESCAPE_SQUOTE:
        jj_consume_token(ESCAPE_SQUOTE);
                            sb.append("'");
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END_SQUOTE);
      {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final private String Text() throws ParseException {
    StringBuilder sb = new StringBuilder();
    label_21:
    while (true) {
      jj_consume_token(TEXT);
               sb.append(getToken(0).image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_21;
      }
    }
      {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final private List<String> FieldList() throws ParseException {
    List<String> list = FastList.newInstance();
    String n;
    n = NamePart();
                   list.add(n);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      n = NamePart();
                             list.add(n);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final private FieldValue FieldValue(String fieldName) throws ParseException {
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERIOD:
      jj_consume_token(PERIOD);
      s = NamePart();
                              {if (true) return new FieldValue(fieldName, s);}
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
      {if (true) return new FieldValue(fieldName);}
    throw new Error("Missing return statement in function");
  }

  final private List<OrderByItem> OrderByList() throws ParseException {
    List<OrderByItem> orderBy = FastList.newInstance();
    OrderByItem obi;
    obi = OrderByItem();
                        orderBy.add(obi);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      obi = OrderByItem();
                                  orderBy.add(obi);
    }
      {if (true) return orderBy;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByItem OrderByItem() throws ParseException {
    ConstantValue value;
    OrderByItem.Order ordering = OrderByItem.Order.DEFAULT;
    OrderByItem.Nulls nulls = OrderByItem.Nulls.DEFAULT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                           ordering = OrderByItem.Order.ASCENDING;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                            ordering = OrderByItem.Order.DESCENDING;
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = ConstantValue();
      break;
    case OPEN_PAREN:
    case TYPE:
    case START_SQUOTE:
    case INTEGER:
    case NAME:
      value = ConstantValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESC:
      case ASC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESC:
          jj_consume_token(DESC);
                       ordering = OrderByItem.Order.DESCENDING;
          break;
        case ASC:
          jj_consume_token(ASC);
                      ordering = OrderByItem.Order.ASCENDING;
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULLS:
      jj_consume_token(NULLS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIRST:
        jj_consume_token(FIRST);
                        nulls = OrderByItem.Nulls.FIRST;
        break;
      case LAST:
        jj_consume_token(LAST);
                       nulls = OrderByItem.Nulls.LAST;
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
      {if (true) return new OrderByItem(ordering, nulls, value);}
    throw new Error("Missing return statement in function");
  }

  final private Integer Integer() throws ParseException {
    jj_consume_token(INTEGER);
                {if (true) return Integer.decode(getToken(0).image);}
    throw new Error("Missing return statement in function");
  }

  final private Value Value() throws ParseException {
    String n;
    Value v;
    int i;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case NAME:
      n = NamePart();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PAREN:
        v = FunctionCallRest(n);
                                  {if (true) return v;}
        break;
      default:
        jj_la1[91] = jj_gen;
        v = FieldValue(n);
                            {if (true) return v;}
      }
      break;
    case INTEGER:
      i = Integer();
                    {if (true) return new NumberValue<Integer>(i);}
      break;
    case START_SQUOTE:
      s = SQuoted();
                    {if (true) return new StringValue(s);}
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Condition ConditionExpression() throws ParseException {
    Condition c;
    c = OrExpression();
                       {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final private Condition AndExpression() throws ParseException {
    List<Condition> list = FastList.newInstance();
    Condition c;
    c = BooleanExpression();
                            list.add(c);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_24;
      }
      jj_consume_token(AND);
      c = BooleanExpression();
                                    list.add(c);
    }
      {if (true) return reduce(list, Joiner.AND);}
    throw new Error("Missing return statement in function");
  }

  final private Condition OrExpression() throws ParseException {
    List<Condition> list = FastList.newInstance();
    Condition c;
    c = AndExpression();
                        list.add(c);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_25;
      }
      jj_consume_token(OR);
      c = AndExpression();
                               list.add(c);
    }
      {if (true) return reduce(list, Joiner.OR);}
    throw new Error("Missing return statement in function");
  }

  final private Value RightValue() throws ParseException {
    Value v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case START_SQUOTE:
    case INTEGER:
    case NAME:
      v = Value();
                  {if (true) return v;}
      break;
    case PARAMETER:
      v = ParameterValue();
                           {if (true) return v;}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private ParameterValue ParameterValue() throws ParseException {
    jj_consume_token(PARAMETER);
                  {if (true) return new ParameterValue(getToken(0).image.substring(1));}
    throw new Error("Missing return statement in function");
  }

  final private Condition BooleanExpression() throws ParseException {
    Value v1, v2, v, r1, r2;
    String op;
    Condition c;
    List<Value> list = FastList.newInstance();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case START_SQUOTE:
    case INTEGER:
    case NAME:
      v1 = Value();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
        jj_consume_token(BETWEEN);
        r1 = RightValue();
        jj_consume_token(AND);
        r2 = RightValue();
            {if (true) return new BetweenCondition(v1, r1, r2);}
        break;
      case IS:
        jj_consume_token(IS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
          jj_consume_token(NULL);
                       op = "="; v2 = Value.NULL;
          break;
        case NOT:
          jj_consume_token(NOT);
          jj_consume_token(NULL);
                             op = "!="; v2 = Value.NULL;
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case EQUALS:
      case NAME:
      case TEXT:
        op = ComparisonOperator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
        case START_SQUOTE:
        case INTEGER:
        case NAME:
        case PARAMETER:
          v2 = RightValue();
          break;
        case OPEN_PAREN:
          jj_consume_token(OPEN_PAREN);
          v = RightValue();
                           list.add(v);
          label_26:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[97] = jj_gen;
              break label_26;
            }
            jj_consume_token(COMMA);
            v = RightValue();
                                     list.add(v);
          }
          jj_consume_token(CLOSE_PAREN);
            {if (true) return new ListCondition(v1, op, list);}
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new BooleanCondition(v1, op, v2);}
      break;
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
      c = ConditionExpression();
      jj_consume_token(CLOSE_PAREN);
                                                           {if (true) return c;}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String ComparisonOperator() throws ParseException {
    StringBuilder sb = new StringBuilder();
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      s = Text();
                 sb.append(s);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_27;
        }
        jj_consume_token(EQUALS);
                   sb.append(getToken(0).image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          s = Text();
                     sb.append(s);
          break;
        default:
          jj_la1[102] = jj_gen;
          ;
        }
      }
        {if (true) return sb.toString();}
      break;
    case NAME:
      jj_consume_token(NAME);
               {if (true) return getToken(0).image;}
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
                 {if (true) return getToken(0).image;}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String MathOperator() throws ParseException {
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      s = Text();
                 {if (true) return s;}
      break;
    case NAME:
      jj_consume_token(NAME);
               {if (true) return getToken(0).image;}
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String AggregateName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      jj_consume_token(COUNT);
                {if (true) return getToken(0).image;}
      break;
    case MAX:
      jj_consume_token(MAX);
              {if (true) return getToken(0).image;}
      break;
    case MIN:
      jj_consume_token(MIN);
              {if (true) return getToken(0).image;}
      break;
    case SUM:
      jj_consume_token(SUM);
              {if (true) return getToken(0).image;}
      break;
    case AVG:
      jj_consume_token(AVG);
              {if (true) return getToken(0).image;}
      break;
    case FIRST:
      jj_consume_token(FIRST);
                {if (true) return getToken(0).image;}
      break;
    case LAST:
      jj_consume_token(LAST);
               {if (true) return getToken(0).image;}
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(RELATION)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(USING)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[106];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000000,0x0,0x0,0x4000,0x0,0x8000,0x10000,0x20000,0x400000,0x400000,0x400000,0x380000,0x380000,0x4000,0x0,0x0,0x8000,0x10000,0x20000,0x380000,0x40000,0x8000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x2000000,0x0,0x0,0x2,0x10000000,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x2,0x2,0xc0,0xc0,0x8,0x0,0x3000000,0x100,0x100,0xc0,0x3e02,0x0,0x0,0x22,0x2,0x3e00,0x100,0x0,0x0,0x4000,0x22,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x8,0x10,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x3e00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x80000,0x2,0x100003,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x400,0x8000,0x400,0x0,0x0,0x0,0x400,0x400,0x0,0x40000,0x400,0x400,0x60000000,0xe0000010,0x400,0xe0000010,0x400,0xe0000010,0x80000010,0x0,0x0,0x0,0x400,0x0,0x0,0x80000010,0x0,0x8c000010,0x400,0x8,0x0,0x80000010,0xc000000,0x0,0x80000010,0x80000000,0x0,0x0,0x80000010,0x400,0xe0000010,0x0,0xe0000010,0x80000010,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x1800,0x6000,0x6000,0xe0001810,0xc000000,0x2000000,0x0,0xe0000010,0x0,0x0,0xe0000010,0xc00000,0x400,0xe0000010,0x80218000,0xe0000010,0x8000,0x0,0x80008000,0x80000000,0xc000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220,0x220,0x2a0,0x2a0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x200,0x0,0x0,0x200,0x200,0x200,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 106; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
